// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Queue = require("bs-platform/lib/js/queue.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function run(task, onResponse) {
  var opened = {
    contents: true
  };
  var cancler = {
    contents: /* NoCancel */0
  };
  var cancled = {
    contents: false
  };
  var syncVal = {
    contents: undefined
  };
  var async = {
    contents: false
  };
  var rejection = function (err) {
    if (opened.contents && !cancled.contents) {
      return Curry._1(onResponse, {
                  TAG: /* Rejection */0,
                  _0: err
                });
    }
    
  };
  var success = function (res) {
    if (!opened.contents) {
      return ;
    }
    if (async.contents) {
      var fn = cancler.contents;
      if (typeof fn !== "number" && fn.TAG !== /* Cancel */0) {
        var fn$1 = fn._0;
        if (cancled.contents) {
          Curry._1(fn$1, res);
        } else {
          cancler.contents = {
            TAG: /* Cancel */0,
            _0: (function (param) {
                return Curry._1(fn$1, res);
              })
          };
        }
      }
      
    } else {
      syncVal.contents = Caml_option.some(res);
    }
    if (!cancled.contents) {
      return Curry._1(onResponse, {
                  TAG: /* Success */1,
                  _0: res
                });
    }
    
  };
  var intermediateCancler = Curry._2(task._0, rejection, success);
  var value = syncVal.contents;
  if (value !== undefined) {
    var value$1 = Caml_option.valFromOption(value);
    if (typeof intermediateCancler === "number" || intermediateCancler.TAG === /* Cancel */0) {
      cancler.contents = intermediateCancler;
    } else {
      var fn = intermediateCancler._0;
      cancler.contents = {
        TAG: /* Cancel */0,
        _0: (function (param) {
            return Curry._1(fn, value$1);
          })
      };
    }
  } else {
    async.contents = true;
    cancler.contents = intermediateCancler;
  }
  return function (param) {
    if (cancled.contents) {
      return ;
    }
    cancled.contents = true;
    var fn = cancler.contents;
    if (typeof fn === "number") {
      opened.contents = false;
      return ;
    }
    if (fn.TAG !== /* Cancel */0) {
      return ;
    }
    opened.contents = false;
    return Curry._1(fn._0, undefined);
  };
}

function noop(param) {
  
}

function chain(task, fn) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, status._0);
                } else {
                  cancelFn2.contents = run(Curry._1(fn, status._0), (function (status) {
                          if (status.TAG === /* Rejection */0) {
                            return Curry._1(rej, status._0);
                          } else {
                            return Curry._1(res, status._0);
                          }
                        }));
                  return ;
                }
              };
              cancelFn1.contents = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function chainRec(recTask, init) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn = {
                contents: noop
              };
              var currentValue = {
                contents: init
              };
              var async = {
                contents: false
              };
              var settled = {
                contents: false
              };
              var drain = function (param) {
                var $$break = false;
                async.contents = false;
                while(!$$break) {
                  settled.contents = false;
                  cancelFn.contents = run(Curry._1(recTask, currentValue.contents), onResponse);
                  if (!settled.contents) {
                    async.contents = true;
                    $$break = true;
                  }
                  
                };
                
              };
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, status._0);
                }
                var value = status._0;
                if (value.TAG !== /* Next */0) {
                  return Curry._1(res, value._0);
                }
                currentValue.contents = value._0;
                if (async.contents) {
                  return drain(undefined);
                } else {
                  settled.contents = true;
                  return ;
                }
              };
              drain(undefined);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          return Curry._1(cancelFn.contents, undefined);
                        })
                    };
            })
        };
}

function chainRej(task, fn) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  cancelFn2.contents = run(Curry._1(fn, status._0), (function (status) {
                          if (status.TAG === /* Rejection */0) {
                            return Curry._1(rej, status._0);
                          } else {
                            return Curry._1(res, status._0);
                          }
                        }));
                  return ;
                } else {
                  return Curry._1(res, status._0);
                }
              };
              cancelFn1.contents = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function map(task, fn) {
  return /* Task */{
          _0: (function (rej, res) {
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, status._0);
                } else {
                  return Curry._1(res, Curry._1(fn, status._0));
                }
              };
              var cancel = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: cancel
                    };
            })
        };
}

function mapRej(task, fn) {
  return /* Task */{
          _0: (function (rej, res) {
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, Curry._1(fn, status._0));
                } else {
                  return Curry._1(res, status._0);
                }
              };
              var cancel = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: cancel
                    };
            })
        };
}

function bimap(task, rejMap, resMap) {
  return /* Task */{
          _0: (function (rej, res) {
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, Curry._1(rejMap, status._0));
                } else {
                  return Curry._1(res, Curry._1(resMap, status._0));
                }
              };
              var cancel = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: cancel
                    };
            })
        };
}

function fold(task, rejMap, resMap) {
  return /* Task */{
          _0: (function (param, res) {
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(res, Curry._1(rejMap, status._0));
                } else {
                  return Curry._1(res, Curry._1(resMap, status._0));
                }
              };
              var cancel = run(task, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: cancel
                    };
            })
        };
}

function also(task1, task2) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, status._0);
                } else {
                  cancelFn2.contents = run(task2, (function (status) {
                          if (status.TAG === /* Rejection */0) {
                            return Curry._1(rej, status._0);
                          } else {
                            return Curry._1(res, status._0);
                          }
                        }));
                  return ;
                }
              };
              cancelFn1.contents = run(task1, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function alt(task1, task2) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onResponse = function (status) {
                if (status.TAG === /* Rejection */0) {
                  cancelFn2.contents = run(task2, (function (status) {
                          if (status.TAG === /* Rejection */0) {
                            return Curry._1(rej, status._0);
                          } else {
                            return Curry._1(res, status._0);
                          }
                        }));
                  return ;
                } else {
                  return Curry._1(res, status._0);
                }
              };
              cancelFn1.contents = run(task1, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function $$finally(task1, task2) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onResponse = function (status1) {
                cancelFn2.contents = run(task2, (function (status) {
                        if (status.TAG === /* Rejection */0) {
                          return Curry._1(rej, status._0);
                        } else if (status1.TAG === /* Rejection */0) {
                          return Curry._1(rej, status1._0);
                        } else {
                          return Curry._1(res, status1._0);
                        }
                      }));
                
              };
              cancelFn1.contents = run(task1, onResponse);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function hook(acquire, dispose, consume) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelFn1 = {
                contents: noop
              };
              var cancelFn2 = {
                contents: noop
              };
              var onAquire = function (status) {
                if (status.TAG === /* Rejection */0) {
                  return Curry._1(rej, status._0);
                }
                var resource = status._0;
                var runDispose = function (__x) {
                  return run(__x, (function (err) {
                                if (err.TAG !== /* Rejection */0) {
                                  return ;
                                }
                                throw err._0;
                              }));
                };
                var onResponse = function (status) {
                  if (status.TAG === /* Rejection */0) {
                    Curry._1(rej, status._0);
                    runDispose(Curry._1(dispose, resource));
                    return ;
                  }
                  Curry._1(res, status._0);
                  runDispose(Curry._1(dispose, resource));
                  
                };
                var cancelConsumer = run(Curry._1(consume, resource), onResponse);
                cancelFn2.contents = (function (param) {
                    Curry._1(cancelConsumer, undefined);
                    runDispose(Curry._1(dispose, resource));
                    
                  });
                
              };
              cancelFn1.contents = run(acquire, onAquire);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelFn1.contents, undefined);
                          return Curry._1(cancelFn2.contents, undefined);
                        })
                    };
            })
        };
}

function pure(value) {
  return /* Task */{
          _0: (function (param, res) {
              Curry._1(res, value);
              return /* NoCancel */0;
            })
        };
}

function reject(value) {
  return /* Task */{
          _0: (function (rej, param) {
              Curry._1(rej, value);
              return /* NoCancel */0;
            })
        };
}

function race(task1, task2) {
  return /* Task */{
          _0: (function (rej, res) {
              var cancelTask1 = {
                contents: noop
              };
              var cancelTask2 = {
                contents: noop
              };
              cancelTask1.contents = run(task1, (function (err) {
                      if (err.TAG === /* Rejection */0) {
                        Curry._1(rej, err._0);
                        return Curry._1(cancelTask2.contents, undefined);
                      }
                      Curry._1(res, err._0);
                      return Curry._1(cancelTask2.contents, undefined);
                    }));
              cancelTask2.contents = run(task2, (function (err) {
                      if (err.TAG === /* Rejection */0) {
                        Curry._1(rej, err._0);
                        return Curry._1(cancelTask1.contents, undefined);
                      }
                      Curry._1(res, err._0);
                      return Curry._1(cancelTask1.contents, undefined);
                    }));
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(cancelTask1.contents, undefined);
                          return Curry._1(cancelTask2.contents, undefined);
                        })
                    };
            })
        };
}

function parallel(concurrentTasks) {
  return /* Task */{
          _0: (function (rej, res) {
              var taskSize = List.length(concurrentTasks);
              var responses = {
                contents: []
              };
              var hotTask = {
                contents: []
              };
              var rejected = {
                contents: false
              };
              var syncQueue = Queue.create(undefined);
              var async = {
                contents: false
              };
              var onResponse = function (value) {
                if (value.TAG === /* Rejection */0) {
                  $$Array.iter((function (task) {
                          return Curry._1(task.cancel, undefined);
                        }), hotTask.contents);
                  rejected.contents = true;
                  return Curry._1(rej, value._0);
                }
                responses.contents = $$Array.append(responses.contents, [value._0]);
                if (responses.contents.length === taskSize) {
                  $$Array.sort((function (a, b) {
                          return a[0] - b[0] | 0;
                        }), responses.contents);
                  return Curry._1(res, $$Array.to_list($$Array.map((function (prim) {
                                        return prim[1];
                                      }), responses.contents)));
                }
                
              };
              hotTask.contents = $$Array.mapi((function (index, task) {
                      return {
                              cancel: run(map(task, (function (value) {
                                          return [
                                                  index,
                                                  value
                                                ];
                                        })), (function (value) {
                                      if (async.contents) {
                                        return onResponse(value);
                                      } else {
                                        return Queue.add(value, syncQueue);
                                      }
                                    })),
                              index: index
                            };
                    }), $$Array.of_list(concurrentTasks));
              async.contents = true;
              while(!Queue.is_empty(syncQueue) && !rejected.contents) {
                onResponse(Queue.take(syncQueue));
              };
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          return $$Array.iter((function (task) {
                                        return Curry._1(task.cancel, undefined);
                                      }), hotTask.contents);
                        })
                    };
            })
        };
}

function both(param) {
  var task2 = param[1];
  var task1 = param[0];
  return /* Task */{
          _0: (function (rej, res) {
              var task1Res = {
                contents: undefined
              };
              var task2Res = {
                contents: undefined
              };
              var task1Cancel = {
                contents: noop
              };
              var task2Cancel = {
                contents: noop
              };
              var onResponse1 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task2Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task2Value = task2Res.contents;
                if (task2Value !== undefined) {
                  return Curry._1(res, [
                              value,
                              Caml_option.valFromOption(task2Value)
                            ]);
                } else {
                  task1Res.contents = Caml_option.some(value);
                  return ;
                }
              };
              var onResponse2 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task1Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task1Value = task1Res.contents;
                if (task1Value !== undefined) {
                  return Curry._1(res, [
                              Caml_option.valFromOption(task1Value),
                              value
                            ]);
                } else {
                  task2Res.contents = Caml_option.some(value);
                  return ;
                }
              };
              task1Cancel.contents = run(task1, onResponse1);
              task2Cancel.contents = run(task2, onResponse2);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(task1Cancel.contents, undefined);
                          return Curry._1(task2Cancel.contents, undefined);
                        })
                    };
            })
        };
}

function triple(param) {
  var task3 = param[2];
  var task2 = param[1];
  var task1 = param[0];
  return /* Task */{
          _0: (function (rej, res) {
              var task1Res = {
                contents: undefined
              };
              var task2Res = {
                contents: undefined
              };
              var task1Cancel = {
                contents: noop
              };
              var task2Cancel = {
                contents: noop
              };
              var onResponse1 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task2Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task2Value = task2Res.contents;
                if (task2Value !== undefined) {
                  return Curry._1(res, [
                              value[0],
                              value[1],
                              Caml_option.valFromOption(task2Value)
                            ]);
                } else {
                  task1Res.contents = value;
                  return ;
                }
              };
              var onResponse2 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task1Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task1Value = task1Res.contents;
                if (task1Value !== undefined) {
                  return Curry._1(res, [
                              task1Value[0],
                              task1Value[1],
                              value
                            ]);
                } else {
                  task2Res.contents = Caml_option.some(value);
                  return ;
                }
              };
              task1Cancel.contents = run(both([
                        task1,
                        task2
                      ]), onResponse1);
              task2Cancel.contents = run(task3, onResponse2);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(task1Cancel.contents, undefined);
                          return Curry._1(task2Cancel.contents, undefined);
                        })
                    };
            })
        };
}

function quadruple(param) {
  var task4 = param[3];
  var task3 = param[2];
  var task2 = param[1];
  var task1 = param[0];
  return /* Task */{
          _0: (function (rej, res) {
              var task1Res = {
                contents: undefined
              };
              var task2Res = {
                contents: undefined
              };
              var task1Cancel = {
                contents: noop
              };
              var task2Cancel = {
                contents: noop
              };
              var onResponse1 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task2Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task2Value = task2Res.contents;
                if (task2Value !== undefined) {
                  return Curry._1(res, [
                              value[0],
                              value[1],
                              task2Value[0],
                              task2Value[1]
                            ]);
                } else {
                  task1Res.contents = value;
                  return ;
                }
              };
              var onResponse2 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task1Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task1Value = task1Res.contents;
                if (task1Value !== undefined) {
                  return Curry._1(res, [
                              task1Value[0],
                              task1Value[1],
                              value[0],
                              value[1]
                            ]);
                } else {
                  task2Res.contents = value;
                  return ;
                }
              };
              task1Cancel.contents = run(both([
                        task1,
                        task2
                      ]), onResponse1);
              task2Cancel.contents = run(both([
                        task3,
                        task4
                      ]), onResponse2);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(task1Cancel.contents, undefined);
                          return Curry._1(task2Cancel.contents, undefined);
                        })
                    };
            })
        };
}

function quintuple(param) {
  var task5 = param[4];
  var task4 = param[3];
  var task3 = param[2];
  var task2 = param[1];
  var task1 = param[0];
  return /* Task */{
          _0: (function (rej, res) {
              var task1Res = {
                contents: undefined
              };
              var task2Res = {
                contents: undefined
              };
              var task1Cancel = {
                contents: noop
              };
              var task2Cancel = {
                contents: noop
              };
              var onResponse1 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task2Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task2Value = task2Res.contents;
                if (task2Value !== undefined) {
                  return Curry._1(res, [
                              value[0],
                              value[1],
                              value[2],
                              value[3],
                              Caml_option.valFromOption(task2Value)
                            ]);
                } else {
                  task1Res.contents = value;
                  return ;
                }
              };
              var onResponse2 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task1Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task1Value = task1Res.contents;
                if (task1Value !== undefined) {
                  return Curry._1(res, [
                              task1Value[0],
                              task1Value[1],
                              task1Value[2],
                              task1Value[3],
                              value
                            ]);
                } else {
                  task2Res.contents = Caml_option.some(value);
                  return ;
                }
              };
              task1Cancel.contents = run(quadruple([
                        task1,
                        task2,
                        task3,
                        task4
                      ]), onResponse1);
              task2Cancel.contents = run(task5, onResponse2);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(task1Cancel.contents, undefined);
                          return Curry._1(task2Cancel.contents, undefined);
                        })
                    };
            })
        };
}

function sextuple(param) {
  var task6 = param[5];
  var task5 = param[4];
  var task4 = param[3];
  var task3 = param[2];
  var task2 = param[1];
  var task1 = param[0];
  return /* Task */{
          _0: (function (rej, res) {
              var task1Res = {
                contents: undefined
              };
              var task2Res = {
                contents: undefined
              };
              var task1Cancel = {
                contents: noop
              };
              var task2Cancel = {
                contents: noop
              };
              var onResponse1 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task2Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task2Value = task2Res.contents;
                if (task2Value !== undefined) {
                  return Curry._1(res, [
                              value[0],
                              value[1],
                              value[2],
                              value[3],
                              value[4],
                              Caml_option.valFromOption(task2Value)
                            ]);
                } else {
                  task1Res.contents = value;
                  return ;
                }
              };
              var onResponse2 = function (response) {
                if (response.TAG === /* Rejection */0) {
                  Curry._1(task1Cancel.contents, undefined);
                  return Curry._1(rej, response._0);
                }
                var value = response._0;
                var task1Value = task1Res.contents;
                if (task1Value !== undefined) {
                  return Curry._1(res, [
                              task1Value[0],
                              task1Value[1],
                              task1Value[2],
                              task1Value[3],
                              task1Value[4],
                              value
                            ]);
                } else {
                  task2Res.contents = Caml_option.some(value);
                  return ;
                }
              };
              task1Cancel.contents = run(quintuple([
                        task1,
                        task2,
                        task3,
                        task4,
                        task5
                      ]), onResponse1);
              task2Cancel.contents = run(task6, onResponse2);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          Curry._1(task1Cancel.contents, undefined);
                          return Curry._1(task2Cancel.contents, undefined);
                        })
                    };
            })
        };
}

var Operators = {
  $great$great$eq: chain,
  $great$great$pipe: map,
  $great$great$eq$bang: chainRej,
  $great$great$pipe$bang: mapRej,
  $great$great$great: run
};

var bind = chain;

var resolve = pure;

exports.run = run;
exports.noop = noop;
exports.chain = chain;
exports.bind = bind;
exports.chainRec = chainRec;
exports.chainRej = chainRej;
exports.map = map;
exports.mapRej = mapRej;
exports.bimap = bimap;
exports.fold = fold;
exports.also = also;
exports.alt = alt;
exports.$$finally = $$finally;
exports.hook = hook;
exports.pure = pure;
exports.resolve = resolve;
exports.reject = reject;
exports.race = race;
exports.parallel = parallel;
exports.both = both;
exports.triple = triple;
exports.quadruple = quadruple;
exports.quintuple = quintuple;
exports.sextuple = sextuple;
exports.Operators = Operators;
/* No side effect */
